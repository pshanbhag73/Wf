private convertApiDataToGraph(apiData: ApiLink[], append: boolean = false) {
  const nodeMap = append ? new Map(this.nodes.map(n => [n.id, n])) : new Map<string, MicroserviceNode>();
  const existingLinks = append ? new Set(this.links.map(l => `${l.source}-${l.target}-${l.interaction}`)) : new Set<string>();
  const links = append ? [...this.links] : [];

  apiData.forEach((item) => {
    const fromAppId = item.fromApp;
    if (!nodeMap.has(fromAppId)) {
      nodeMap.set(fromAppId, { id: fromAppId, name: item.fromApp, type: 'app' });
    }

    let fromId = fromAppId;
    if (item.fromComponent) {
      fromId = `${fromAppId}-${item.fromComponent}`;
      const isService = this.appServices[item.fromApp]?.includes(item.fromComponent);
      if (!nodeMap.has(fromId)) {
        nodeMap.set(fromId, {
          id: fromId,
          name: item.fromComponent,
          type: isService ? 'service' : this.inferEntityType(item.fromComponent, item.toType),
          app: fromAppId,
        });
      }
      const belongsKey = `${fromAppId}-${fromId}-belongs`;
      if (!existingLinks.has(belongsKey)) {
        links.push({ source: fromAppId, target: fromId, interaction: 'belongs' });
        existingLinks.add(belongsKey);
      }
    } else if (item.fromEntity) {
      fromId = `${fromAppId}-${item.fromEntity}`;
      if (!nodeMap.has(fromId)) {
        nodeMap.set(fromId, {
          id: fromId,
          name: item.fromEntity,
          type: this.inferEntityType(item.fromEntity, item.toType),
          app: fromAppId,
        });
      }
      const belongsKey = `${fromAppId}-${fromId}-belongs`;
      if (!existingLinks.has(belongsKey)) {
        links.push({ source: fromAppId, target: fromId, interaction: 'belongs' });
        existingLinks.add(belongsKey);
      }
    }

    const toAppId = item.toApp;
    if (!nodeMap.has(toAppId)) {
      nodeMap.set(toAppId, { id: toAppId, name: item.toApp, type: 'app' });
    }

    let toId = toAppId;
    if (item.toComponent) {
      toId = `${toAppId}-${item.toComponent}`;
      const isService = this.appServices[item.toApp]?.includes(item.toComponent);
      if (!nodeMap.has(toId)) {
        nodeMap.set(toId, {
          id: toId,
          name: item.toComponent,
          type: isService ? 'service' : this.inferEntityType(item.toComponent, item.toType),
          app: toAppId,
        });
      }
      const belongsKey = `${toAppId}-${toId}-belongs`;
      if (!existingLinks.has(belongsKey)) {
        links.push({ source: toAppId, target: toId, interaction: 'belongs' });
        existingLinks.add(belongsKey);
      }
    } else if (item.toEntity) {
      toId = `${toAppId}-${item.toEntity}`;
      if (!nodeMap.has(toId)) {
        nodeMap.set(toId, {
          id: toId,
          name: item.toEntity,
          type: this.inferEntityType(item.toEntity, item.toType),
          app: toAppId,
        });
      }
      const belongsKey = `${toAppId}-${toId}-belongs`;
      if (!existingLinks.has(belongsKey)) {
        links.push({ source: toAppId, target: toId, interaction: 'belongs' });
        existingLinks.add(belongsKey);
      }
    }

    if (fromId !== toId) {
      const linkKey = `${fromId}-${toId}-${item.toType}`;
      if (!existingLinks.has(linkKey)) {
        links.push({ source: fromId, target: toId, interaction: item.toType });
        existingLinks.add(linkKey);
      }
    }
  });

  this.nodes = Array.from(nodeMap.values());
  this.links = links;
}
