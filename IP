// app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']  // Assuming SCSS for variable support
})
export class AppComponent {
  numFaces = 50;
  faces = Array(this.numFaces).fill(0).map((_, i) => i);
}




<!-- app.component.html -->
<div class="scene">
  <div class="title">
    <h1>Incident Pulser+</h1>
    <h2>Triaging Incidents</h2>
  </div>
  <div class="holder">
    <div class="stack">
      <div class="cylinder top">
        <div class="face" *ngFor="let i of faces" [style.--index]="i"></div>
        <div class="label">Incident Pulse</div>
        <div class="subtitle">Triaging Major Incidents Faster</div>
        <!-- Additional placeholder texts or elements can be added similarly -->
      </div>
      <div class="cylinder middle">
        <div class="face" *ngFor="let i of faces" [style.--index]="i"></div>
        <div class="label">Device Tracker</div>
        <div class="subtitle">Monitor reachability and metrics</div>
      </div>
      <div class="cylinder bottom">
        <div class="face" *ngFor="let i of faces" [style.--index]="i"></div>
        <div class="label">Application Flow</div>
        <div class="subtitle">View application flow</div>
        <!-- For the graph, a simple SVG placeholder -->
        <svg class="graph" viewBox="0 0 100 50">
          <polyline points="10,40 30,20 50,30 70,10 90,25" fill="none" stroke="white" stroke-width="2"></polyline>
          <circle cx="10" cy="40" r="2" fill="white"></circle>
          <circle cx="30" cy="20" r="2" fill="white"></circle>
          <circle cx="50" cy="30" r="2" fill="white"></circle>
          <circle cx="70" cy="10" r="2" fill="white"></circle>
          <circle cx="90" cy="25" r="2" fill="white"></circle>
        </svg>
      </div>
    </div>
  </div>
</div>



// app.component.scss
$pi: 3.14159265358979;
$cylinder-width: 300px;
$cylinder-height: 100px;
$face-count: 50;
$face-deg: (360deg / $face-count);
$face-width: ($cylinder-width / $face-count);
$face-shift: ($cylinder-width / $pi / 2);
$stack-gap: 20px;

.scene {
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: linear-gradient(to bottom, #5c9df5, #d4e4ff);
  perspective: 1000px;
  overflow: hidden;
}

.title {
  color: white;
  text-align: center;
  margin-bottom: 50px;
  h1 {
    font-size: 48px;
    margin: 0;
  }
  h2 {
    font-size: 36px;
    margin: 0;
  }
}

.holder {
  transform-style: preserve-3d;
  transform: rotateX(-20deg) rotateY(30deg);  // Tilt to match the image perspective
}

.stack {
  position: relative;
  transform-style: preserve-3d;
}

.cylinder {
  position: relative;
  height: $cylinder-height;
  width: $cylinder-width;
  transform-style: preserve-3d;
  margin-bottom: $stack-gap;

  &.top {
    transform: translate3d(0, 0, 0);
  }

  &.middle {
    transform: translate3d(0, $cylinder-height + $stack-gap, 0);
  }

  &.bottom {
    transform: translate3d(0, ($cylinder-height + $stack-gap) * 2, 0);
  }
}

.face {
  position: absolute;
  background-color: #001f3f;  // Dark blue to match the image
  opacity: 0.8;
  height: 100%;
  width: $face-width;
  top: 0;
  left: 50%;
  transform: rotateY(calc(#{$face-deg} * var(--index))) translateZ($face-shift);
  box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);  // Glowing effect
}

.label {
  position: absolute;
  top: 50%;
  left: 20%;
  transform: translate(-50%, -50%) rotateY(0deg) translateZ($face-shift + 1px);
  color: white;
  font-size: 24px;
  font-weight: bold;
  white-space: nowrap;
}

.subtitle {
  position: absolute;
  top: 60%;
  left: 20%;
  transform: translate(-50%, -50%) rotateY(0deg) translateZ($face-shift + 1px);
  color: white;
  font-size: 14px;
  white-space: nowrap;
}

.graph {
  position: absolute;
  bottom: 20%;
  left: 30%;
  width: 150px;
  height: 50px;
  transform: rotateY(0deg) translateZ($face-shift + 1px);
}

// Add more styles for additional texts, icons, or glow effects as needed
// For white bases/rims, you can add pseudo-elements or additional divs with border-radius and background white
.cylinder::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 0;
  width: 100%;
  height: 20px;
  background: white;
  border-radius: 50%;
  opacity: 0.5;
  transform: translateZ(-1px);
}



