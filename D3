export interface MicroserviceNode {
  id: string;
  name: string;
  type: string; // e.g., 'service', 'database', 'queue', 'external'
}

export interface MicroserviceLink {
  source: string;
  target: string;
  interaction: string; // e.g., 'http', 'queue', 'db'
}

export const microservicesData = {
  nodes: [
    { id: 'ms1', name: 'AuthService', type: 'service' },
    { id: 'ms2', name: 'ProductService', type: 'service' },
    { id: 'ms3', name: 'OrderService', type: 'service' },
    { id: 'db1', name: 'AuthDB', type: 'database' },
    { id: 'db2', name: 'ProductDB', type: 'database' },
    { id: 'queue1', name: 'OrderQueue', type: 'queue' },
    { id: 'ext1', name: 'PaymentGateway', type: 'external' },
  ],
  links: [
    { source: 'ms1', target: 'db1', interaction: 'db' }, // AuthService -> AuthDB
    { source: 'ms2', target: 'db2', interaction: 'db' }, // ProductService -> ProductDB
    { source: 'ms3', target: 'queue1', interaction: 'queue' }, // OrderService -> OrderQueue
    { source: 'ms3', target: 'ms2', interaction: 'http' }, // OrderService -> ProductService (API call)
    { source: 'ms3', target: 'ext1', interaction: 'http' }, // OrderService -> PaymentGateway
  ],
};


import { Component, AfterViewInit, ElementRef, ViewChild, Input, OnChanges, SimpleChanges } from '@angular/core';
import * as d3 from 'd3';
import { microservicesData, MicroserviceNode, MicroserviceLink } from '../microservices-data';

@Component({
  selector: 'app-microservices-flowmap',
  template: '<div #flowmapContainer></div>',
  styles: [
    `
      :host {
        display: block;
        width: 100%;
        height: 100vh;
      }
      div {
        width: 100%;
        height: 100%;
      }
    `,
  ],
})
export class MicroservicesFlowmapComponent implements AfterViewInit, OnChanges {
  @ViewChild('flowmapContainer') flowmapContainer!: ElementRef;
  @Input() selectedMicroserviceId: string = 'ms1'; // Default to 'ms1' (AuthService)

  private width = 800;
  private height = 600;
  private svg: any;

  ngAfterViewInit() {
    this.initializeSvg();
    this.updateFlowmap();
  }

  ngOnChanges(changes: SimpleChanges) {
    if (changes['selectedMicroserviceId'] && this.svg) {
      this.updateFlowmap();
    }
  }

  private initializeSvg() {
    this.svg = d3
      .select(this.flowmapContainer.nativeElement)
      .append('svg')
      .attr('width', this.width)
      .attr('height', this.height);
  }

  private updateFlowmap() {
    // Clear previous content
    this.svg.selectAll('*').remove();

    // Filter data for the selected microservice and its direct dependencies
    const serviceNode = microservicesData.nodes.find((node) => node.id === this.selectedMicroserviceId);
    if (!serviceNode) return;

    const relatedLinks = microservicesData.links.filter(
      (link) => link.source === this.selectedMicroserviceId || link.target === this.selectedMicroserviceId
    );
    const relatedNodeIds = new Set(
      relatedLinks.flatMap((link) => [link.source, link.target])
    );
    const filteredNodes = microservicesData.nodes.filter((node) => relatedNodeIds.has(node.id));

    // Create a simulation for layout
    const simulation = d3
      .forceSimulation<MicroserviceNode>(filteredNodes)
      .force(
        'link',
        d3
          .forceLink<MicroserviceNode, MicroserviceLink>(relatedLinks)
          .id((d) => d.id)
          .distance(120)
      )
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(this.width / 2, this.height / 2));

    // Draw links with labels
    const link = this.svg
      .append('g')
      .attr('class', 'links')
      .selectAll('g')
      .data(relatedLinks)
      .enter()
      .append('g');

    link
      .append('line')
      .attr('stroke', (d) => {
        switch (d.interaction) {
          case 'http':
            return '#1f77b4';
          case 'queue':
            return '#2ca02c';
          case 'db':
            return '#ff7f0e';
          default:
            return '#999';
        }
      })
      .attr('stroke-width', 2);

    link
      .append('text')
      .attr('dy', -5)
      .attr('text-anchor', 'middle')
      .attr('fill', '#333')
      .text((d) => d.interaction);

    // Draw nodes
    const node = this.svg
      .append('g')
      .attr('class', 'nodes')
      .selectAll('g')
      .data(filteredNodes)
      .enter()
      .append('g')
      .call(
        d3
          .drag<SVGGElement, MicroserviceNode>()
          .on('start', dragStarted)
          .on('drag', dragged)
          .on('end', dragEnded)
      );

    // Add shapes based on type
    node
      .append('circle')
      .attr('r', 25)
      .attr('fill', (d) => {
        switch (d.type) {
          case 'service':
            return '#1f77b4'; // Blue for microservices
          case 'database':
            return '#ff7f0e'; // Orange for databases
          case 'queue':
            return '#2ca02c'; // Green for queues
          case 'external':
            return '#d62728'; // Red for external services
          default:
            return '#999';
        }
      });

    // Add labels
    node
      .append('text')
      .attr('dy', 4)
      .attr('text-anchor', 'middle')
      .attr('fill', '#fff')
      .text((d) => d.name);

    // Update positions on each tick
    simulation.on('tick', () => {
      link
        .select('line')
        .attr('x1', (d) => (d.source as any).x)
        .attr('y1', (d) => (d.source as any).y)
        .attr('x2', (d) => (d.target as any).x)
        .attr('y2', (d) => (d.target as any).y);

      link
        .select('text')
        .attr('x', (d) => ((d.source as any).x + (d.target as any).x) / 2)
        .attr('y', (d) => ((d.source as any).y + (d.target as any).y) / 2);

      node.attr('transform', (d) => `translate(${d.x},${d.y})`);
    });

    // Drag functions
    function dragStarted(event: any, d: any) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(event: any, d: any) {
      d.fx = event.x;
      d.fy = event.y;
    }

    function dragEnded(event: any, d: any) {
      if (!event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
  }
}
