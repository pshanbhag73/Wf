import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';
import * as d3 from 'd3';
import { microservicesData, MicroserviceNode, MicroserviceLink } from '../microservices-data';

@Component({
  selector: 'app-microservices-flowmap',
  template: '<div #flowmapContainer></div>',
  styles: [
    `
      :host {
        display: block;
        width: 100%;
        height: 100vh;
      }
      div {
        width: 100%;
        height: 100%;
      }
    `,
  ],
})
export class MicroservicesFlowmapComponent implements AfterViewInit {
  @ViewChild('flowmapContainer') flowmapContainer!: ElementRef;

  private width = 800;
  private height = 600;
  private svg: any;

  ngAfterViewInit() {
    this.initializeSvg();
    this.renderFlowmap();
  }

  private initializeSvg() {
    this.svg = d3
      .select(this.flowmapContainer.nativeElement)
      .append('svg')
      .attr('width', this.width)
      .attr('height', this.height);
  }

  private renderFlowmap() {
    // Use all nodes and links from the data
    const nodes = microservicesData.nodes;
    const links = microservicesData.links;

    // Force simulation
    const simulation = d3
      .forceSimulation<MicroserviceNode>(nodes)
      .force(
        'link',
        d3
          .forceLink<MicroserviceNode, MicroserviceLink>(links)
          .id((d) => d.id)
          .distance(150)
      )
      .force('charge', d3.forceManyBody().strength(-400))
      .force('center', d3.forceCenter(this.width / 2, this.height / 2));

    // Draw links
    const link = this.svg
      .append('g')
      .attr('class', 'links')
      .selectAll('line')
      .data(links)
      .enter()
      .append('line')
      .attr('stroke', (d) => {
        switch (d.interaction) {
          case 'http':
            return '#1f77b4';
          case 'queue':
            return '#2ca02c';
          case 'db':
            return '#ff7f0e';
          default:
            return '#999';
        }
      })
      .attr('stroke-width', 2);

    // Draw link labels
    const linkLabels = this.svg
      .append('g')
      .attr('class', 'link-labels')
      .selectAll('text')
      .data(links)
      .enter()
      .append('text')
      .attr('dy', -5)
      .attr('text-anchor', 'middle')
      .attr('fill', '#333')
      .text((d) => d.interaction);

    // Draw nodes
    const node = this.svg
      .append('g')
      .attr('class', 'nodes')
      .selectAll('g')
      .data(nodes)
      .enter()
      .append('g');

    // Add circles for nodes
    node
      .append('circle')
      .attr('r', 25)
      .attr('fill', (d) => {
        switch (d.type) {
          case 'service':
            return '#1f77b4';
          case 'database':
            return '#ff7f0e';
          case 'queue':
            return '#2ca02c';
          case 'external':
            return '#d62728';
          default:
            return '#999';
        }
      });

    // Add node labels outside the circles (below)
    node
      .append('text')
      .attr('dy', 35) // Position below the circle (radius 25 + offset)
      .attr('text-anchor', 'middle')
      .attr('fill', '#000') // Black text for visibility outside the circle
      .text((d) => d.name);

    // Update positions on each tick
    simulation.on('tick', () => {
      link
        .attr('x1', (d) => (d.source as any).x)
        .attr('y1', (d) => (d.source as any).y)
        .attr('x2', (d) => (d.target as any).x)
        .attr('y2', (d) => (d.target as any).y);

      linkLabels
        .attr('x', (d) => ((d.source as any).x + (d.target as any).x) / 2)
        .attr('y', (d) => ((d.source as any).y + (d.target as any).y) / 2);

      node.attr('transform', (d) => `translate(${d.x},${d.y})`);
    });
  }
}
