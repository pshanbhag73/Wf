import { Component, OnInit } from '@angular/core';
import * as d3 from 'd3';

@Component({
  selector: 'app-flow-map',
  template: '<div id="flow-map-container"></div>',
  styles: [`
    #flow-map-container {
      width: 100%;
      height: 700px;
    }
    .node-app { fill: #69b3a2; }
    .node-component { fill: #ff9999; }
    .node-external { fill: #9999ff; }
    .link { fill: none; stroke: #ccc; stroke-opacity: 0.6; }
    .link-internal { stroke: #69b3a2; }
    .link-external { stroke: #9999ff; stroke-dasharray: 5; }
    text { fill: white; font-size: 12px; pointer-events: none; }
  `]
})
export class FlowMapComponent implements OnInit {
  constructor() {}

  ngOnInit(): void {
    this.createFlowMap();
  }

  private createFlowMap(): void {
    // Sample data representing an application ecosystem
    const nodes = [
      // Main application components
      { id: 'WebServer', type: 'component', app: 'MainApp', x: 100, y: 300 },
      { id: 'AuthService', type: 'component', app: 'MainApp', x: 300, y: 200 },
      { id: 'Database', type: 'component', app: 'MainApp', x: 300, y: 400 },
      { id: 'API', type: 'component', app: 'MainApp', x: 500, y: 300 },
      // External application
      { id: 'PaymentService', type: 'external', app: 'PaymentApp', x: 700, y: 200 },
      { id: 'NotificationService', type: 'external', app: 'NotifyApp', x: 700, y: 400 }
    ];

    const links = [
      // Internal dependencies
      { source: 'WebServer', target: 'AuthService', type: 'internal' },
      { source: 'WebServer', target: 'Database', type: 'internal' },
      { source: 'AuthService', target: 'API', type: 'internal' },
      { source: 'Database', target: 'API', type: 'internal' },
      // External dependencies
      { source: 'API', target: 'PaymentService', type: 'external' },
      { source: 'API', target: 'NotificationService', type: 'external' }
    ];

    // SVG setup
    const width = 900;
    const height = 700;
    const svg = d3.select('#flow-map-container')
      .append('svg')
      .attr('width', width)
      .attr('height', height);

    // Arrow marker for links
    svg.append('defs').append('marker')
      .attr('id', 'arrow')
      .attr('viewBox', '0 -5 10 10')
      .attr('refX', 15)
      .attr('markerWidth', 6)
      .attr('markerHeight', 6)
      .attr('orient', 'auto')
      .append('path')
      .attr('d', 'M0,-5L10,0L0,5')
      .attr('fill', '#999');

    // Draw links
    const link = svg.selectAll('.link')
      .data(links)
      .enter()
      .append('path')
      .attr('class', d => `link link-${d.type}`)
      .attr('d', (d: any) => {
        const source = nodes.find(n => n.id === d.source);
        const target = nodes.find(n => n.id === d.target);
        return this.diagonalPath(source, target);
      })
      .attr('marker-end', 'url(#arrow)')
      .attr('stroke-width', 2);

    // Draw nodes
    const node = svg.selectAll('.node')
      .data(nodes)
      .enter()
      .append('g')
      .attr('class', d => `node node-${d.type}`)
      .attr('transform', d => `translate(${d.x},${d.y})`);

    node.append('circle')
      .attr('r', 25)
      .on('mouseover', function(event, d) {
        d3.select(this).transition().attr('r', 30);
        tooltip.style('visibility', 'visible').text(`${d.id} (${d.app})`);
      })
      .on('mousemove', (event) => {
        tooltip.style('top', (event.pageY - 10) + 'px')
               .style('left', (event.pageX + 10) + 'px');
      })
      .on('mouseout', function() {
        d3.select(this).transition().attr('r', 25);
        tooltip.style('visibility', 'hidden');
      });

    node.append('text')
      .attr('dy', 4)
      .attr('text-anchor', 'middle')
      .text(d => d.id);

    // Tooltip
    const tooltip = d3.select('body')
      .append('div')
      .style('position', 'absolute')
      .style('background', '#f9f9f9')
      .style('padding', '5px')
      .style('border', '1px solid #ccc')
      .style('border-radius', '3px')
      .style('visibility', 'hidden');

    // Dragging behavior
    node.call(d3.drag()
      .on('drag', (event: any, d: any) => {
        d.x = event.x;
        d.y = event.y;
        d3.select(event.sourceEvent.target.parentNode)
          .attr('transform', `translate(${d.x},${d.y})`);
        link.attr('d', (l: any) => {
          const source = nodes.find(n => n.id === l.source);
          const target = nodes.find(n => n.id === l.target);
          return this.diagonalPath(source, target);
        });
      }));
  }

  private diagonalPath(source: any, target: any): string {
    const dx = target.x - source.x;
    const dy = target.y - source.y;
    const dr = Math.sqrt(dx * dx + dy * dy);
    return `M${source.x},${source.y}A${dr},${dr} 0 0,1 ${target.x},${target.y}`;
  }
}
