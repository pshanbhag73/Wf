import { Component, OnInit } from '@angular/core';
import * as d3 from 'd3';
import { treeData } from '../data/tree-data'; // Your data file

@Component({
  selector: 'app-tree-visualization',
  template: '<div id="tree-container"></div>',
  styles: [`#tree-container { width: 100%; height: 600px; }`]
})
export class TreeVisualizationComponent implements OnInit {
  private svg: any;
  private g: any;

  ngOnInit() {
    this.createTree();
  }

  createTree() {
    const width = 800;
    const height = 600;

    // Clear previous SVG if it exists
    d3.select('#tree-container').select('svg').remove();

    // Create SVG container with zoom
    this.svg = d3.select('#tree-container')
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .call(d3.zoom()
        .scaleExtent([0.1, 4]) // Min and max zoom levels
        .on('zoom', (event) => {
          this.g.attr('transform', event.transform); // Apply zoom transform to the group
        }));

    // Add a group element to contain the tree (this will be zoomed)
    this.g = this.svg.append('g')
      .attr('transform', 'translate(50,50)'); // Initial offset

    // Define tree layout
    const treeLayout = d3.tree().size([height - 100, width - 100]);
    const root = d3.hierarchy(treeData);
    treeLayout(root);

    // Draw links (relationships)
    this.g.selectAll('.link')
      .data(root.links())
      .enter()
      .append('path')
      .attr('class', 'link')
      .attr('d', d3.linkHorizontal()
        .x(d => d.y)
        .y(d => d.x))
      .attr('fill', 'none')
      .attr('stroke', '#ccc');

    // Draw nodes (apps, services, dependencies)
    const node = this.g.selectAll('.node')
      .data(root.descendants())
      .enter()
      .append('g')
      .attr('class', 'node')
      .attr('transform', d => `translate(${d.y},${d.x})`);

    // Add circles for nodes
    node.append('circle')
      .attr('r', 5)
      .attr('fill', d => {
        if (d.data.type === 'app') return '#1f77b4';
        if (d.data.type === 'service') return '#ff7f0e';
        return '#2ca02c'; // dependencies
      });

    // Add labels
    node.append('text')
      .attr('dy', 3)
      .attr('x', d => d.children ? -10 : 10)
      .attr('text-anchor', d => d.children ? 'end' : 'start')
      .text(d => d.data.name);
  }
}



{
  "name": "RootApp",
  "children": [
    {
      "name": "App1",
      "type": "app",
      "children": [
        {
          "name": "ServiceA",
          "type": "service",
          "children": [
            { "name": "DependencyX", "type": "dependency" }
          ]
        },
        { "name": "ServiceB", "type": "service" }
      ]
    },
    {
      "name": "App2",
      "type": "app",
      "children": [
        {
          "name": "ServiceC",
          "type": "service",
          "children": [
            { "name": "DependencyY", "type": "dependency" }
          ]
        }
      ]
    }
  ]
}
