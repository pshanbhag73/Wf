import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';
import * as d3 from 'd3';
import { microservicesData, MicroserviceNode, MicroserviceLink } from '../microservices-data';

@Component({
  selector: 'app-microservices-flowmap',
  template: '<div #flowmapContainer></div>',
  styles: [
    `
      :host {
        display: block;
        width: 100%;
        height: 100vh;
      }
      div {
        width: 100%;
        height: 100%;
      }
    `,
  ],
})
export class MicroservicesFlowmapComponent implements AfterViewInit {
  @ViewChild('flowmapContainer') flowmapContainer!: ElementRef;

  private svg: any;
  private zoom: any;
  private width!: number;
  private height!: number;

  ngAfterViewInit() {
    this.initializeSvg();
    this.renderFlowmap();
  }

  private initializeSvg() {
    const container = this.flowmapContainer.nativeElement;
    this.width = container.clientWidth;
    this.height = container.clientHeight;

    this.svg = d3
      .select(container)
      .append('svg')
      .attr('width', this.width)
      .attr('height', this.height);

    this.zoom = d3.zoom()
      .scaleExtent([0.1, 10])
      .on('zoom', (event) => {
        this.svg.select('.content').attr('transform', event.transform);
      });

    this.svg.call(this.zoom);
    this.svg.append('g').attr('class', 'content');
  }

  private renderFlowmap() {
    const content = this.svg.select('.content');
    const nodes = microservicesData.nodes;
    const links = microservicesData.links;

    // Force simulation
    const simulation = d3
      .forceSimulation<MicroserviceNode>(nodes)
      .force(
        'link',
        d3
          .forceLink<MicroserviceNode, MicroserviceLink>(links)
          .id((d) => d.id)
          .distance((d) => (d.interaction === 'belongs' ? 80 : 120))
      )
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(this.width / 2, this.height / 2))
      .force('collision', d3.forceCollide(30));

    // Draw links
    const link = content
      .append('g')
      .attr('class', 'links')
      .selectAll('line')
      .data(links)
      .enter()
      .append('line')
      .attr('stroke', (d) => this.getLinkColor(d.interaction))
      .attr('stroke-width', (d) => (d.interaction === 'belongs' ? 1 : 2))
      .attr('stroke-dasharray', (d) => (d.interaction === 'belongs' ? '5,5' : '0'))
      .on('click', (event, d) => console.log('Clicked link:', d))
      .on('dblclick', (event, d) => console.log('Double-clicked link:', d));

    // Draw link labels
    const linkLabels = content
      .append('g')
      .attr('class', 'link-labels')
      .selectAll('text')
      .data(links.filter((d) => d.interaction !== 'belongs'))
      .enter()
      .append('text')
      .attr('text-anchor', 'middle')
      .attr('fill', '#333')
      .attr('font-size', '12px')
      .text((d) => d.interaction)
      .on('click', (event, d) => console.log('Clicked link label:', d))
      .on('dblclick', (event, d) => console.log('Double-clicked link label:', d));

    // Draw nodes
    const node = content
      .append('g')
      .attr('class', 'nodes')
      .selectAll('g')
      .data(nodes)
      .enter()
      .append('g')
      .on('click', (event, d) => console.log('Clicked node:', d))
      .on('dblclick', (event, d) => console.log('Double-clicked node:', d));

    // Add circles for nodes
    node
      .append('circle')
      .attr('r', (d) => (d.type === 'app' ? 15 : 5))
      .attr('fill', (d) => this.getNodeColor(d.type));

    // Add node labels below the circles
    node
      .append('text')
      .attr('dy', (d) => (d.type === 'app' ? 25 : 15))
      .attr('text-anchor', 'middle')
      .attr('fill', '#000')
      .text((d) => d.name);

    // Update positions
    simulation.on('tick', () => {
      link
        .attr('x1', (d) => (d.source as any).x)
        .attr('y1', (d) => (d.source as any).y)
        .attr('x2', (d) => (d.target as any).x)
        .attr('y2', (d) => (d.target as any).y);

      linkLabels.each(function (d: any) {
        const x1 = d.source.x;
        const y1 = d.source.y;
        const x2 = d.target.x;
        const y2 = d.target.y;
        const angle = Math.atan2(y2 - y1, x2 - x1) * (180 / Math.PI);
        d3.select(this)
          .attr('x', (x1 + x2) / 2)
          .attr('y', (y1 + y2) / 2)
          .attr('transform', `rotate(${angle}, ${(x1 + x2) / 2}, ${(y1 + y2) / 2})`);
      });

      node.attr('transform', (d) => `translate(${d.x},${d.y})`);
    });

    // Auto-zoom after simulation stabilizes
    simulation.on('end', () => {
      this.autoZoom(nodes);
    });

    // Add legends with labels
    this.addLegends();
  }

  private autoZoom(nodes: MicroserviceNode[]) {
    const bounds = {
      xMin: d3.min(nodes, (d) => d.x! - 50) || 0,
      xMax: d3.max(nodes, (d) => d.x! + 50) || this.width,
      yMin: d3.min(nodes, (d) => d.y! - 50) || 0,
      yMax: d3.max(nodes, (d) => d.y! + 50) || this.height,
    };

    const contentWidth = bounds.xMax - bounds.xMin;
    const contentHeight = bounds.yMax - bounds.yMin;
    const scale = 0.9 * Math.min(this.width / contentWidth, this.height / contentHeight);
    const translateX = this.width / 2 - (bounds.xMin + bounds.xMax) / 2 * scale;
    const translateY = this.height / 2 - (bounds.yMin + bounds.yMax) / 2 * scale;

    const transform = d3.zoomIdentity
      .translate(translateX, translateY)
      .scale(scale);

    this.svg
      .transition()
      .duration(750)
      .call(this.zoom.transform, transform);
  }

  private getNodeColor(type: string): string {
    switch (type) {
      case 'app': return '#800080'; // Purple for all apps
      case 'service': return '#1f77b4'; // Blue for all services
      case 'database': return '#ff7f0e'; // Orange for databases
      case 'queue': return '#2ca02c'; // Green for queues
      case 'external': return '#d62728'; // Red for externals
      default: return '#999';
    }
  }

  private getLinkColor(interaction: string): string {
    switch (interaction) {
      case 'belongs': return '#888'; // Gray for app-service links
      case 'http': return '#1f77b4';
      case 'queue': return '#2ca02c';
      case 'db': return '#ff7f0e';
      default: return '#999';
    }
  }

  private addLegends() {
    const legend = this.svg.append('g')
      .attr('class', 'legend')
      .attr('transform', `translate(${this.width - 150}, 20)`);

    let yOffset = 0;

    // Application legend label
    legend.append('text')
      .attr('x', 0)
      .attr('y', yOffset)
      .attr('fill', '#000')
      .attr('font-weight', 'bold')
      .text('Application');

    // Application legend
    const appLegendData = [
      { label: 'App', color: '#800080' },
    ];

    const appLegend = legend.selectAll('.app-legend')
      .data(appLegendData)
      .enter()
      .append('g')
      .attr('class', 'app-legend')
      .attr('transform', (d, i) => `translate(0, ${yOffset + (i + 1) * 25})`)
      .on('click', (event, d) => console.log('Clicked app legend:', d.label))
      .on('dblclick', (event, d) => console.log('Double-clicked app legend:', d.label));

    appLegend
      .append('circle')
      .attr('r', 7)
      .attr('cx', 0)
      .attr('cy', 0)
      .attr('fill', (d) => d.color);

    appLegend
      .append('text')
      .attr('x', 15)
      .attr('y', 5)
      .attr('fill', '#000')
      .text((d) => d.label);

    yOffset += (appLegendData.length + 1) * 25 + 10; // Extra space after section

    // Dependencies legend label
    legend.append('text')
      .attr('x', 0)
      .attr('y', yOffset)
      .attr('fill', '#000')
      .attr('font-weight', 'bold')
      .text('Dependencies');

    // Dependencies (Nodes) legend
    const nodeLegendData = [
      { label: 'Service', color: '#1f77b4' },
      { label: 'Database', color: '#ff7f0e' },
      { label: 'Queue', color: '#2ca02c' },
      { label: 'External', color: '#d62728' },
    ];

    const nodeLegend = legend.selectAll('.node-legend')
      .data(nodeLegendData)
      .enter()
      .append('g')
      .attr('class', 'node-legend')
      .attr('transform', (d, i) => `translate(0, ${yOffset + (i + 1) * 25})`)
      .on('click', (event, d) => console.log('Clicked node legend:', d.label))
      .on('dblclick', (event, d) => console.log('Double-clicked node legend:', d.label));

    nodeLegend
      .append('circle')
      .attr('r', 5)
      .attr('cx', 0)
      .attr('cy', 0)
      .attr('fill', (d) => d.color);

    nodeLegend
      .append('text')
      .attr('x', 15)
      .attr('y', 5)
      .attr('fill', '#000')
      .text((d) => d.label);

    yOffset += (nodeLegendData.length + 1) * 25 + 10; // Extra space after section

    // Interactions legend label
    legend.append('text')
      .attr('x', 0)
      .attr('y', yOffset)
      .attr('fill', '#000')
      .attr('font-weight', 'bold')
      .text('Interactions');

    // Interactions (Links) legend
    const linkLegendData = [
      { label: 'Belongs', color: '#888' },
      { label: 'HTTP', color: '#1f77b4' },
      { label: 'Queue', color: '#2ca02c' },
      { label: 'DB', color: '#ff7f0e' },
    ];

    const linkLegend = legend.selectAll('.link-legend')
      .data(linkLegendData)
      .enter()
      .append('g')
      .attr('class', 'link-legend')
      .attr('transform', (d, i) => `translate(0, ${yOffset + (i + 1) * 25})`)
      .on('click', (event, d) => console.log('Clicked link legend:', d.label))
      .on('dblclick', (event, d) => console.log('Double-clicked link legend:', d.label));

    linkLegend
      .append('line')
      .attr('x1', -5)
      .attr('y1', 0)
      .attr('x2', 10)
      .attr('y2', 0)
      .attr('stroke', (d) => d.color)
      .attr('stroke-width', 2)
      .attr('stroke-dasharray', (d) => (d.label === 'Belongs' ? '5,5' : '0'));

    linkLegend
      .append('text')
      .attr('x', 15)
      .attr('y', 5)
      .attr('fill', '#000')
      .text((d) => d.label);
  }
}
