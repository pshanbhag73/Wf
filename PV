package com.example.incidentpulse.controller;

import com.example.incidentpulse.exception.BadRequestException;
import com.example.incidentpulse.model.TestRequest;
import com.example.incidentpulse.model.TestResult;
import com.example.incidentpulse.service.TestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.regex.Pattern;

@RestController
public class TestController {

    @Autowired
    private TestService testService;

    // Simplified regex: alphanumeric, hyphens, dots for hostname
    private static final Pattern HOSTNAME_PATTERN = 
        Pattern.compile("^[a-zA-Z0-9][a-zA-Z0-9.-]{0,251}[a-zA-Z0-9]$");

    // Simplified regex: digits and dots for IPv4
    private static final Pattern IPV4_PATTERN = 
        Pattern.compile("^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$");

    // Simplified regex: hex digits, colons, and double colons for IPv6
    private static final Pattern IPV6_PATTERN = 
        Pattern.compile("^[0-9a-fA-F:]{2,39}$|^::$");

    @PostMapping("/test")
    public ResponseEntity<TestResult> performTest(@RequestBody TestRequest request) throws IOException {
        // Validate host
        String host = request.getHost();
        if (host == null || host.trim().isEmpty()) {
            throw new BadRequestException("Host cannot be null or empty");
        }

        // Check for dangerous characters
        if (host.contains(";") || host.contains("|") || host.contains("&") || 
            host.contains("<") || host.contains(">") || host.contains("*") || 
            host.contains("`") || host.contains("$") || host.contains(" ")) {
            throw new BadRequestException("Host contains invalid characters");
        }

        // Validate as hostname, IPv4, or IPv6
        boolean isValidHost = HOSTNAME_PATTERN.matcher(host).matches() || 
                              IPV4_PATTERN.matcher(host).matches() || 
                              (IPV6_PATTERN.matcher(host).matches() && isValidIPv6(host));
        if (!isValidHost) {
            throw new BadRequestException("Invalid host: must be a valid hostname, IPv4, or IPv6 address");
        }

        TestResult result = testService.performTest(
            request.getHost(),
            request.getTestType(),
            request.getCount(),
            request.getLocation(),
            request.getTimeoutSeconds()
        );
        return ResponseEntity.ok(result);
    }

    // Additional check for IPv6 to ensure proper format (beyond regex)
    private boolean isValidIPv6(String host) {
        try {
            // Split by :: to check for valid segments
            String[] parts = host.split("::", -1);
            if (parts.length > 2) {
                return false; // More than one :: is invalid
            }
            // Check each segment
            for (String part : host.replace("::", ":").split(":")) {
                if (!part.isEmpty() && Integer.parseInt(part, 16) > 0xFFFF) {
                    return false; // Segment exceeds 16-bit value
                }
            }
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
}
