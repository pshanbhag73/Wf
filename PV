import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { Subject, forkJoin, BehaviorSubject, Observable, of } from 'rxjs';
import { takeUntil, finalize, catchError } from 'rxjs/operators';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  testForm: FormGroup;
  running = false;
  results: any[] = [];
  progressSubject = new BehaviorSubject<number>(0);
  progress = 0;
  private stopSubject = new Subject<void>();
  private totalTests = 0;
  private completedTests = 0;
  private apiUrl = 'http://localhost:8080/test'; // Update to your backend URL

  constructor(private fb: FormBuilder, private http: HttpClient) {
    this.testForm = fb.group({
      host: ['', Validators.required],
      testType: ['', Validators.required],
      count: [4, [Validators.required, Validators.min(1), Validators.max(100)]],
      timeoutSeconds: [2, [Validators.required, Validators.min(1), Validators.max(60)]],
      locations: ['', Validators.required]  // Comma-separated locations
    });

    this.progressSubject.subscribe(value => this.progress = value);
  }

  runTests() {
    if (this.testForm.invalid) return;

    this.running = true;
    this.results = [];
    this.completedTests = 0;
    this.stopSubject = new Subject<void>();  // Reset stop subject

    const formValue = this.testForm.value;
    const locations = formValue.locations.split(',').map((loc: string) => loc.trim());
    this.totalTests = locations.length;

    const requests: Observable<any>[] = locations.map(loc => 
      this.http.post(this.apiUrl, {
        host: formValue.host,
        testType: formValue.testType,
        count: formValue.count,
        location: loc,
        timeoutSeconds: formValue.timeoutSeconds
      }).pipe(
        takeUntil(this.stopSubject),
        finalize(() => this.updateProgress()),
        catchError(err => {
          console.error(err);
          return of({ error: err.message, location: loc });
        })
      )
    );

    forkJoin(requests).subscribe(res => {
      this.results = res;
      this.running = false;
    }, err => {
      console.error(err);
      this.running = false;
    });
  }

  stopTests() {
    this.stopSubject.next();
    this.stopSubject.complete();
    this.running = false;
  }

  private updateProgress() {
    this.completedTests++;
    const progressValue = (this.completedTests / this.totalTests) * 100;
    this.progressSubject.next(progressValue);
  }
}




<div style="padding: 20px;">
  <h1>Incident Pulse Test UI</h1>
  
  <form [formGroup]="testForm" (ngSubmit)="runTests()">
    <div>
      <label for="host">Host/URL:</label>
      <input id="host" formControlName="host" placeholder="e.g., google.com or http://google.com" required>
    </div>
    
    <div>
      <label for="testType">Test Type:</label>
      <select id="testType" formControlName="testType" required>
        <option value="ping">Ping</option>
        <option value="traceroute">Traceroute</option>
        <option value="dns">DNS</option>
        <option value="http">HTTP</option>
      </select>
    </div>
    
    <div>
      <label for="count">Count:</label>
      <input id="count" type="number" formControlName="count" required>
    </div>
    
    <div>
      <label for="timeoutSeconds">Timeout Seconds:</label>
      <input id="timeoutSeconds" type="number" formControlName="timeoutSeconds" required>
    </div>
    
    <div>
      <label for="locations">Locations (comma-separated):</label>
      <input id="locations" formControlName="locations" placeholder="e.g., us-east-1,us-west-2" required>
    </div>
    
    <button type="submit" [disabled]="running">Run Tests</button>
    <button type="button" (click)="stopTests()" [disabled]="!running">Stop Tests</button>
  </form>
  
  <div *ngIf="running">
    <h2>Progress: {{ progress | number:'1.0-0' }}%</h2>
    <progress [value]="progress" max="100"></progress>
  </div>
  
  <div *ngIf="results.length > 0">
    <h2>Test Results</h2>
    <div *ngFor="let res of results">
      <h3>Location: {{ res.location || 'Default' }}</h3>
      <div *if="res.error; else showStats">
        <p>Error: {{ res.error }}</p>
      </div>
      <ng-template #showStats>
        <p>Status: {{ res.status }}</p>
        <p>Raw Output:</p>
        <pre>{{ res.rawOutput }}</pre>
        <p>Parsed Result:</p>
        <pre>{{ res.parsedResult | json }}</pre>
      </ng-template>
    </div>
  </div>
</div>
