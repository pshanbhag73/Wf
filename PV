import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-test-visualization',
  template: `<div *ngIf="results && results.length > 0">
    <div *ngFor="let result of results">
      <div [ngSwitch]="result.testType.toLowerCase()">
        <div *ngSwitchCase="'traceroute'">
          <div echarts [options]="chartOption" style="height: 400px; width: 100%;"></div>
        </div>
        <div *ngSwitchDefault>
          <p>No visualization available for {{ result.testType }}.</p>
        </div>
      </div>
    </div>
  </div>`,
})
export class TestVisualizationComponent implements OnInit {
  @Input() results: any[] = [];
  chartOption: any = {};

  ngOnInit() {
    // Assuming results contain parsed data for visualization
    this.chartOption = this.getTracerouteChartOption(this.results);
  }

  private getTracerouteChartOption(results: any[]) {
    const nodes: any[] = [];
    const links: any[] = [];
    const categories = [
      { name: 'Location' },
      { name: 'Hop' },
      { name: 'Host' }
    ];

    results.forEach((result, index) => {
      const location = result.location || 'Default';
      const host = result.host;

      nodes.push({ name: location, category: 0 }); // Location
      nodes.push({ name: host, category: 2 }); // Host

      links.push({ source: location, target: host });

      if (result.parsedResult && result.parsedResult.hops) {
        result.parsedResult.hops.forEach((hop: any, hopIndex: number) => {
          const hopName = `Hop ${hop.hop_number} (${hop.host || hop.ip || '*'})`;
          nodes.push({ name: hopName, category: 1 }); // Hop

          links.push({ source: hopIndex === 0 ? location : `Hop ${hop.hop_number - 1} (${result.parsedResult.hops[hopIndex - 1].host || result.parsedResult.hops[hopIndex - 1].ip || '*'})`, target: hopName });
          if (hopIndex === result.parsedResult.hops.length - 1) {
            links.push({ source: hopName, target: host });
          }
        });
      }
    });

    return {
      title: { text: 'Traceroute Path Visualization' },
      tooltip: {},
      legend: [{ data: categories.map(a => a.name) }],
      series: [{
        type: 'graph',
        layout: 'force',
        data: nodes,
        links: links,
        categories: categories,
        roam: true,
        label: {
          show: true,
          position: 'right',
          formatter: '{b}'
        },
        lineStyle: {
          color: 'source',
          curveness: 0.3
        },
        force: {
          repulsion: 100
        }
      }]
    };
  }
}
