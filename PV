// Update the edgePaths class to include base and trace-specific for better selection:
.attr('class', d => `edge-path edge-trace-${d.traceIndices.join('-')}`)

// Update the mouseover handler to highlight all edges used by any trace in the hovered edge:
edgePaths.on('mouseover', (event, d) => {
  const hoveredTraceIndices = d.traceIndices;
  // Find all unique edges that share any trace with hovered
  const edgesToHighlight = uniqueEdges.filter(e => 
    e.traceIndices.some(idx => hoveredTraceIndices.includes(idx))
  );
  // Dim all
  d3.selectAll('.edge-path').attr('opacity', 0.3).attr('stroke-width', 1);
  // Highlight relevant edges
  edgesToHighlight.forEach(e => {
    d3.selectAll(`.edge-trace-${e.traceIndices.join('-')}`).attr('opacity', 1).attr('stroke-width', 3);
  });
  // Tooltip with details for this edge
  const details = d.traces
    .map(t => `${t}: ${d3.mean(traceLinks.filter(l => l.trace === t && l.source === d.source && l.target === d.target), g => g.rtt) || 0} ms`)
    .join('\n');
  this.tooltip.text(details).style('opacity', 1);
  this.updateTooltipPosition(event);
}).on('mouseout', () => {
  d3.selectAll('.edge-path').attr('opacity', 0.7).attr('stroke-width', 1);
  this.tooltip.style('opacity', 0);
});
