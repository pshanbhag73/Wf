import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-test-visualization',
  template: `<div *ngIf="results && results.length > 0">
    <div *ngFor="let result of results">
      <div [ngSwitch]="result.testType.toLowerCase()">
        <div *ngSwitchCase="'traceroute'">
          <div echarts [options]="chartOption" style="height: 400px; width: 100%;"></div>
        </div>
        <div *ngSwitchDefault>
          <p>No visualization available for {{ result.testType }}.</p>
        </div>
      </div>
    </div>
  </div>`,
})
export class TestVisualizationComponent implements OnInit {
  @Input() results: any[] = [];
  chartOption: any = {};

  ngOnInit() {
    this.chartOption = this.getTracerouteChartOption(this.results);
  }

  private getTracerouteChartOption(results: any[]) {
    const nodes: any[] = [];
    const links: any[] = [];
    const categories = [
      { name: 'Location' },
      { name: 'Hop' },
      { name: 'Host' }
    ];

    results.forEach((result, index) => {
      const location = result.location || 'Default';
      const host = result.host;

      // Add location node
      nodes.push({ name: location, category: 0, x: 0, y: index * 100 }); // Left side

      // Add host node
      nodes.push({ name: host, category: 2, x: 800, y: index * 100 }); // Right side

      links.push({ source: location, target: host });

      if (result.parsedResult && result.parsedResult.hops) {
        let prevNode = location;
        result.parsedResult.hops.forEach((hop: any, hopIndex: number) => {
          let hopName = `Hop ${hop.hop_number}`;
          if (hop.host) {
            hopName += ` (${hop.host})`;
          } else if (hop.ip) {
            hopName += ` (${hop.ip})`;
          } else {
            hopName += ' (*)';
          }

          // Handle duplicates by adding unique identifier if needed
          let uniqueHopName = hopName;
          let suffix = 1;
          while (nodes.some(n => n.name === uniqueHopName)) {
            uniqueHopName = hopName + `_${suffix}`;
            suffix++;
          }

          nodes.push({ name: uniqueHopName, category: 1, x: (hopIndex + 1) * 150, y: index * 100, symbolSize: 50, itemStyle: { color: '#ff9800' }, label: { show: true } }); // Horizontal positioning

          // Link to previous node
          links.push({ source: prevNode, target: uniqueHopName, lineStyle: { color: '#999' } });

          prevNode = uniqueHopName;
        });

        // Link last hop to host
        if (result.parsedResult.hops.length > 0) {
            links.push({ source: prevNode, target: host });
        }
      }
    });

    return {
      title: { text: 'Traceroute Path Visualization' },
      tooltip: {
        formatter: (params: any) => {
          if (params.data.category === 1) { // Hop
            return `Hop: ${params.name}<br>RTT1: ${params.data.rtt1_ms || '*'} ms<br>RTT2: ${params.data.rtt2_ms || '*'} ms<br>RTT3: ${params.data.rtt3_ms || '*'} ms`;
          }
          return params.name;
        }
      },
      legend: [{ data: categories.map(a => a.name) }],
      series: [{
        type: 'graph',
        layout: 'none', // Use none layout for fixed positions
        data: nodes,
        links: links,
        categories: categories,
        roam: true,
        label: {
          show: true,
          position: 'right',
          formatter: '{b}'
        },
        lineStyle: {
          color: 'source',
          curveness: 0.3
        }
      }]
    };
  }
}
