package com.example.incidentpulse.controller;

import com.example.incidentpulse.exception.BadRequestException;
import com.example.incidentpulse.model.TestRequest;
import com.example.incidentpulse.model.TestResult;
import com.example.incidentpulse.service.TestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.regex.Pattern;

@RestController
public class TestController {

    @Autowired
    private TestService testService;

    // Regex for hostname (DNS-compliant: alphanumeric, hyphens, dots)
    private static final Pattern HOSTNAME_PATTERN = 
        Pattern.compile("^(?=.{1,253}$)(([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,})$");

    // Regex for IPv4 (xxx.xxx.xxx.xxx, each octet 0-255)
    private static final Pattern IPV4_PATTERN = 
        Pattern.compile("^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$");

    // Regex for IPv6 (full or abbreviated formats)
    private static final Pattern IPV6_PATTERN = 
        Pattern.compile("^(?:(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|" +
                       "(?:[0-9a-fA-F]{1,4}:){1,7}:|" +
                       "(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|" +
                       "(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|" +
                       "(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|" +
                       "(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|" +
                       "(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|" +
                       "[0-9a-fA-F]{1,4}:(?::[0-9a-fA-F]{1,4}){1,6}|" +
                       ":(?::[0-9a-fA-F]{1,4}){1,7}|::)$");

    @PostMapping("/test")
    public ResponseEntity<TestResult> performTest(@RequestBody TestRequest request) throws IOException {
        // Validate host
        String host = request.getHost();
        if (host == null || host.trim().isEmpty()) {
            throw new BadRequestException("Host cannot be null or empty");
        }

        // Check for dangerous characters
        if (host.contains(";") || host.contains("|") || host.contains("&") || 
            host.contains("<") || host.contains(">") || host.contains("*") || 
            host.contains("`") || host.contains("$")) {
            throw new BadRequestException("Host contains invalid characters");
        }

        // Validate as hostname, IPv4, or IPv6
        if (!HOSTNAME_PATTERN.matcher(host).matches() && 
            !IPV4_PATTERN.matcher(host).matches() && 
            !IPV6_PATTERN.matcher(host).matches()) {
            throw new BadRequestException("Invalid host: must be a valid hostname, IPv4, or IPv6 address");
        }

        TestResult result = testService.performTest(
            request.getHost(),
            request.getTestType(),
            request.getCount(),
            request.getLocation(),
            request.getTimeoutSeconds()
        );
        return ResponseEntity.ok(result);
    }
}
